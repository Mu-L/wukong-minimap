# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

cmake_minimum_required(VERSION 3.15)

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
	message(FATAL_ERROR "In-tree builds are not supported. Run CMake from a separate directory: cmake -B build")
endif()

set(CMKR_ROOT_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(CMKR_ROOT_PROJECT ON)

	# Bootstrap cmkr and automatically regenerate CMakeLists.txt
	include(cmkr.cmake OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)
	if(CMKR_INCLUDE_RESULT)
		cmkr()
	endif()

	# Enable folder support
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)

	# Create a configure-time dependency on cmake.toml to improve IDE support
	set_property(DIRECTORY APPEND PROPERTY CMAKE_CONFIGURE_DEPENDS cmake.toml)
endif()

 
add_compile_options($<$<CXX_COMPILER_ID:MSVC>:/MP>)

# Enable PDB generation in release mode, but without the extra crap that RelWithDebInfo adds
add_compile_options("$<$<CONFIG:Release>:/Zi>")
add_link_options("$<$<CONFIG:Release>:/DEBUG>")
add_link_options("$<$<CONFIG:Release>:/OPT:REF>")
add_link_options("$<$<CONFIG:Release>:/OPT:ICF>")

project(wukong-minimap)

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /MP")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP")

set(ASMJIT_STATIC ON CACHE BOOL "" FORCE)

if ("${CMAKE_BUILD_TYPE}" MATCHES "Release")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /MT")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MT")

    # Statically compile runtime
    string(REGEX REPLACE "/MD" "/MT" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
    string(REGEX REPLACE "/MD" "/MT" CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
    string(REGEX REPLACE "/MD" "/MT" CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}")
    string(REGEX REPLACE "/MD" "/MT" CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE}")

    message(NOTICE "Building in Release mode")
endif()

set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")

add_subdirectory(vendor/UESDK)

include(FetchContent)

# Fix warnings about DOWNLOAD_EXTRACT_TIMESTAMP
if(POLICY CMP0135)
	cmake_policy(SET CMP0135 NEW)
endif()
message(STATUS "Fetching spdlog (7c02e204c92545f869e2f04edaab1f19fe8b19fd)...")
FetchContent_Declare(spdlog
	GIT_REPOSITORY
		"https://github.com/gabime/spdlog"
	GIT_TAG
		7c02e204c92545f869e2f04edaab1f19fe8b19fd
)
FetchContent_MakeAvailable(spdlog)

message(STATUS "Fetching bddisasm (70db095765ab2066dd88dfb7bbcc42259ed167c5)...")
FetchContent_Declare(bddisasm
	GIT_REPOSITORY
		"https://github.com/bitdefender/bddisasm"
	GIT_TAG
		70db095765ab2066dd88dfb7bbcc42259ed167c5
)
FetchContent_MakeAvailable(bddisasm)

message(STATUS "Fetching kananlib (61a04d4219e3cb81b524a6990d3924289982bbf6)...")
FetchContent_Declare(kananlib
	GIT_REPOSITORY
		"https://github.com/cursey/kananlib"
	GIT_TAG
		61a04d4219e3cb81b524a6990d3924289982bbf6
)
FetchContent_MakeAvailable(kananlib)

set(SAFETYHOOK_FETCH_ZYDIS ON)

message(STATUS "Fetching safetyhook (4dce6a63268fc0a563f09a4e195b27ad847f9714)...")
FetchContent_Declare(safetyhook
	GIT_REPOSITORY
		"https://github.com/praydog/safetyhook"
	GIT_TAG
		4dce6a63268fc0a563f09a4e195b27ad847f9714
)
FetchContent_MakeAvailable(safetyhook)

message(STATUS "Fetching json (bc889afb4c5bf1c0d8ee29ef35eaaf4c8bef8a5d)...")
FetchContent_Declare(json
	GIT_REPOSITORY
		"https://github.com/nlohmann/json"
	GIT_TAG
		bc889afb4c5bf1c0d8ee29ef35eaaf4c8bef8a5d
)
FetchContent_MakeAvailable(json)

set(TRACY_STATIC ON CACHE BOOL "" FORCE)
set(TRACY_ENABLE OFF CACHE BOOL "" FORCE)

message(STATUS "Fetching tracy (897aec5b062664d2485f4f9a213715d2e527e0ca)...")
FetchContent_Declare(tracy
	GIT_REPOSITORY
		"https://github.com/wolfpld/tracy"
	GIT_TAG
		897aec5b062664d2485f4f9a213715d2e527e0ca
)
FetchContent_MakeAvailable(tracy)

set(BUILD_TOOLS OFF CACHE BOOL "" FORCE)

message(STATUS "Fetching directxtk (f5026eb34e7053b1aff325d38db107703f394974)...")
FetchContent_Declare(directxtk
	GIT_REPOSITORY
		"https://github.com/microsoft/DirectXTK"
	GIT_TAG
		f5026eb34e7053b1aff325d38db107703f394974
)
FetchContent_MakeAvailable(directxtk)

if(CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 19.35)
    target_compile_options(DirectXTK PRIVATE /Zc:templateScope-)
endif()

set(BUILD_TOOLS OFF CACHE BOOL "" FORCE)

message(STATUS "Fetching directxtk12 (528801aa6dd8d628c2f756c41a76d300f47de478)...")
FetchContent_Declare(directxtk12
	GIT_REPOSITORY
		"https://github.com/microsoft/DirectXTK12"
	GIT_TAG
		528801aa6dd8d628c2f756c41a76d300f47de478
)
FetchContent_MakeAvailable(directxtk12)

if(CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 19.35)
    target_compile_options(DirectXTK12 PRIVATE /Zc:templateScope-)
endif()

# Target: glm
set(glm_SOURCES
	cmake.toml
	"vendor/glm/glm/detail/glm.cpp"
)

add_library(glm STATIC)

target_sources(glm PRIVATE ${glm_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${glm_SOURCES})

target_include_directories(glm PUBLIC
	"vendor/glm"
)

# Target: imgui
set(imgui_SOURCES
	cmake.toml
	"vendor/imgui/imgui.cpp"
	"vendor/imgui/imgui_demo.cpp"
	"vendor/imgui/imgui_draw.cpp"
	"vendor/imgui/imgui_tables.cpp"
	"vendor/imgui/imgui_widgets.cpp"
)

add_library(imgui STATIC)

target_sources(imgui PRIVATE ${imgui_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${imgui_SOURCES})

target_compile_definitions(imgui PUBLIC
	"IMGUI_USER_CONFIG=\"${CMAKE_CURRENT_SOURCE_DIR}/src/uevr-imgui/uevr_imconfig.hpp\""
)

target_include_directories(imgui PUBLIC
	"vendor/imgui"
	"src/uevr-imgui"
)

# Target: uevr
set(uevr_SOURCES
	cmake.toml
	"src/Framework.cpp"
	"src/Framework.hpp"
	"src/Logging.hpp"
	"src/Main.cpp"
	"src/WindowFilter.cpp"
	"src/WindowFilter.hpp"
	"src/hooks/D3D11Hook.cpp"
	"src/hooks/D3D11Hook.hpp"
	"src/hooks/D3D12Hook.cpp"
	"src/hooks/D3D12Hook.hpp"
	"src/hooks/DInputHook.cpp"
	"src/hooks/DInputHook.hpp"
	"src/hooks/WindowsMessageHook.cpp"
	"src/hooks/WindowsMessageHook.hpp"
	"src/hooks/XInputHook.cpp"
	"src/hooks/XInputHook.hpp"
	"src/uevr-imgui/font_robotomedium.hpp"
	"src/uevr-imgui/imgui_impl_dx11.cpp"
	"src/uevr-imgui/imgui_impl_dx11.h"
	"src/uevr-imgui/imgui_impl_dx12.cpp"
	"src/uevr-imgui/imgui_impl_dx12.h"
	"src/uevr-imgui/imgui_impl_win32.cpp"
	"src/uevr-imgui/imgui_impl_win32.h"
	"src/uevr-imgui/uevr_imconfig.hpp"
)

add_library(uevr SHARED)

target_sources(uevr PRIVATE ${uevr_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${uevr_SOURCES})

target_compile_features(uevr PUBLIC
	cxx_std_23
)

target_compile_options(uevr PUBLIC
	"/GS-"
	"/bigobj"
	"/EHa"
	"/MP"
)

target_include_directories(uevr PUBLIC
	"shared/"
	"src/"
	"include/"
	"${OPENXR_SOURCE_DIR}/src"
)

target_link_libraries(uevr PUBLIC
	d3d11
	d3d12
	spdlog
	safetyhook
	glm
	imgui
	nlohmann_json
	Version
	TracyClient
	DirectXTK
	DirectXTK12
)

target_link_libraries(uevr PUBLIC
	kananlib
	uesdk
)

set_target_properties(uevr PROPERTIES
	OUTPUT_NAME
		UEVRBackend
	RUNTIME_OUTPUT_DIRECTORY_RELEASE
		"${CMAKE_BINARY_DIR}/bin/${CMKR_TARGET}"
	RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO
		"${CMAKE_BINARY_DIR}/bin/${CMKR_TARGET}"
	LIBRARY_OUTPUT_DIRECTORY_RELEASE
		"${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}"
	LIBRARY_OUTPUT_DIRECTORY_RELWITHDEBINFO
		"${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}"
	ARCHIVE_OUTPUT_DIRECTORY_RELEASE
		"${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}"
	ARCHIVE_OUTPUT_DIRECTORY_RELWITHDEBINFO
		"${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}"
)
